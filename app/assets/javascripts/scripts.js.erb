// Components
Vue.component('venue-container', {
  template: '#venue-template',
	props: ['result']
});

var mm = new Vue({
	el: '#app',
	data: {
		clientId: "<%= ENV['CLIENT_ID'] %>",
		// clientSecret: "<%= ENV['CLIENT_SECRET'] %>",
		clientSecret: "YRFJZOCG0J3RAJCLGTTAPORHLNBHRNO0X0DSBTBRNA21HMFS",
		mapBoxKey: "<%= ENV['MAPBOX_KEY'] %>",
		showModal: false,
		yourLocation: "154 Sorauren Ave. Toronto",
		friendLocation: "1 Yonge Street Toronto",
		venueType: "",
		showResults: false,
		centerPtResult: "",
		results: [],
		map: ""
	},
	computed: {
		noResults: function() {
			if ((this.results.length === 0 ) && (this.showResults)) {
				return true;
			} else {
				return false;
			}
		}
	},
	methods: {
		showResultsBox: function() {
			this.showResults = true;
		},
		//move user inputs into variables//
		getUserInputs: function() {
			this.showResults = false;
			if (this.yourLocation == "" && this.friendLocation == "") {
				alert("Please fill in the two location fields!");
			}
			else if (this.yourLocation == "") {
				alert("Please fill in your location!");
			}
			else if (this.friendLocation == "") {
				alert("Please fill in your friend's location!");
			}
			else if ( this.venueType == ""  ) {
				alert("Please choose either Coffee or Beer!");
			}
			else {
				$('html, body').animate({
		        scrollTop: $("#map").offset().top
		    }, 800);
				$(".resultsContainer").removeClass("hide").addClass("animated bounceInUp");
				this.convertToGeo(this.yourLocation,this.friendLocation);
			}
		},
		// Convert user-entered data to properly formatted object using Split//
		convertToGeo: function(yourLocation,friendLocation) {
			var userEntry1 = this.yourLocation.split(" ");
			var userEntry2 = this.friendLocation.split(" ");
			this.getGeocode(userEntry1, userEntry2);
		},

		getGeocode: function(userEntry1, userEntry2) {
			var self = this;
			function getFirstLocation() {
				return axios.get("https://api.mapbox.com/v4/geocode/mapbox.places/" + userEntry1 + ".json?access_token=" + mm.mapBoxKey
				).then(function(response) {
					return response;
				}).catch(function(error) {
					console.error(error);
					return error;
				});
			};

			function getSecondLocation() {
				return axios.get("https://api.mapbox.com/v4/geocode/mapbox.places/" + userEntry2 + ".json?access_token=" + mm.mapBoxKey
				).then(function(response) {
					return response;
				}).catch(function(error) {
					console.error(error);
					return error;
				});
			};

			axios.all([getFirstLocation(), getSecondLocation()])
				.then(axios.spread(function(res1,res2){
					var coords1 = res1.data.features[0].geometry.coordinates;
					var coords2 = res2.data.features[0].geometry.coordinates;
					// reverse the array order.
					coords1.reverse();
					coords2.reverse();
					self.getMidpoint(coords1,coords2);
			}));
		},
		//Combine the two coordinate arrays into one midpoint array using turf.center.
		getMidpoint: function(coords1,coords2) {
			var features = {
			  "type": "FeatureCollection",
			  "features": [
			    {
			      "type": "Feature",
			      "properties": {},
			      "geometry": {
			        "type": "Point",
			        "coordinates": coords1
			      }
			    }, {
			      "type": "Feature",
			      "properties": {},
			      "geometry": {
			        "type": "Point",
			        "coordinates": coords2
			      }
			    }
			  ]
			};

			var centerPt = turf.center(features);
			var centerPtResult = centerPt.geometry.coordinates;
			
			centerPtResult = centerPtResult[0] + "," + centerPtResult[1];
			this.centerPtResult = centerPtResult;
			this.getVenues();
		},
		// --------------------//
		//FourSquare API begins//
		//1. Get a list of venues from 4S.
		getVenues: function() {
			var self = this;
			if (this.venueType === "coffee") {
				var sectionSelect = "coffee";
				var querySelect = "coffee";
			}
			else if (this.venueType === "beer") {
				var sectionSelect = "drinks";
				var querySelect = "beer";
			};

		//Foursquare API call
			axios.get("https://api.foursquare.com/v2/venues/explore", {
				params: {
					ll: this.centerPtResult,
					client_id: this.clientId,
					client_secret: this.clientSecret,
					v: 20150722,
					radius: 3000,
					section: sectionSelect,
					openNow: 1,
					venuePhotos: 1,
					query: querySelect,
					limit: 6,
					sortByDistance: 1,
					format: "json"
				}
			}).then(function(res3) {
				var venueResult = res3.data.response.groups[0].items;
				mm.results = venueResult;
				self.showResults = true;
				self.displayVenues();
			}).catch(function(error) {
				console.error(error);
			});
		},
		//3. build our html to display on the page.
		displayVenues: function() {
			L.Icon.Default.imagePath = "https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/images/"
			this.results.forEach(function(result) {
				var v = result.venue;
				var address = v.location.formattedAddress[0];
				L.marker([v.location.lat, v.location.lng]).addTo(mm.map).bindPopup(v.name + ":" + "<br>" + address);
			});
			mm.map.setView([this.results[0].venue.location.lat, this.results[0].venue.location.lng], 15);
		},
		// Hide modal on click
		closeModal: function() {
			this.showModal = false;
		},
	}, // End of methods
	mounted: function(){
		// Hide modal on Esc
		document.addEventListener("keydown", (e) => {
      if (e.keyCode == 27) {
        this.closeModal();
      }
    });
    // Initialize mapbox
    var map = L.map('map').setView([43.65323,-79.38318
    ], 12);


    // Disable scrolling when hovering on map
    map.scrollWheelZoom.disable();

    // Some Mapbox specifics for on load [suplied by mapbox]
    L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
        maxZoom: 18,
        id: 'rbnhmll.n1oca4ci',
        accessToken: "pk.eyJ1IjoicmJuaG1sbCIsImEiOiI3NjY4ZDk5NjFhMTYyMDMxMWFmMmM5YWEzMzlkMDgwZiJ9.Ep7u1zX_6SFI94jPki9O-w"
    }).addTo(map);
    
    this.map = map;
	} // End Mounted (Vue Ready)
});