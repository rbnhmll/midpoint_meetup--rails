// Components
Vue.component('results', {
  template: `
  	<div class="venueContainer">
			<img class="venue__image" src="{{ result.venue__image }}">
			<h2 class="venue__name">{{ result.venue__name }}</h2>
			<p class="venue__addr">{{ result.venue__addr }}</p>
			<p class="venue__city">{{ result.venue__city }}</p>
			<p class="venue__dist"><span>{{ result.venue__dist }}</span> from midpoint.</p>
			<a class="venue__link" href="{{ result.venue__link }}" target="_blank"><i class="fa fa-foursquare"></i> Visit On Foursquare</a>
		</div>
	`
})

var mm = new Vue({
	el: '#app',
	data: {
		clientId: "<%= ENV['CLIENT_ID'] %>",
		clientSecret: "<%= ENV['CLIENT_SECRET'] %>",
		mapBoxKey: "<%= ENV['MAPBOX_KEY'] %>",
		
		showModal: false,
		yourLocation: "154 Sorauren ave. toronto",
		friendLocation: "99 spadina road toronto",
		venueType: ""
	},
	methods: {
		//move user inputs into variables//
		getUserInputs: function() {
			if (this.yourLocation == "" && this.friendLocation == "") {
				alert("Please fill in the two location fields!");
			}
			else if (this.yourLocation == "") {
				alert("Please fill in your location!");
			}
			else if (this.friendLocation == "") {
				alert("Please fill in your friend's location!");
			}
			else if ( this.venueType == ""  ) {
				alert("Please choose either Coffee or Beer!");
			}
			else {
				$('html, body').animate({
		        scrollTop: $("#map").offset().top
		    }, 800);
				$(".resultsContainer").removeClass("hide").addClass("animated bounceInUp");
				this.convertToGeo(this.yourLocation,this.friendLocation);
			}
		},
		// Convert user-entered data to properly formatted object using Split//
		convertToGeo: function(yourLocation,friendLocation) {
			var userEntry1 = this.yourLocation.split(" ");
			var userEntry2 = this.friendLocation.split(" ");
			this.getGeocode(userEntry1, userEntry2);
		},

		getGeocode: function(userEntry1, userEntry2) {
			var self = this;
			var call1 = $.ajax({
				url: "https://api.mapbox.com/v4/geocode/mapbox.places/" + userEntry1 + ".json?" + this.mapBoxKey,
				type: "GET",
				dataType: "json",
				data: {
					access_token: this.mapBoxKey,
					format: "json"
				}
			});

			var call2 = $.ajax({
				url: "https://api.mapbox.com/v4/geocode/mapbox.places/" + userEntry2 + ".json?" + this.mapBoxKey,
				type: "GET",
				dataType: "json",
				data: {
					access_token: this.mapBoxKey,
					format: "json"
				}
			});
			// This is a promise.
			$.when(call1,call2).then(function(res1,res2) {
				var coords1 = res1[0].features[0].geometry.coordinates;
				var coords2 = res2[0].features[0].geometry.coordinates;
				// reverse the array order.
				coords1.reverse();
				coords2.reverse();
				self.getMidpoint(coords1,coords2);
			});
		},
		//Combine the two coordinate arrays into one midpoint array using turf.center.
		getMidpoint: function(coords1,coords2) {
			var features = {
			  "type": "FeatureCollection",
			  "features": [
			    {
			      "type": "Feature",
			      "properties": {},
			      "geometry": {
			        "type": "Point",
			        "coordinates": coords1
			      }
			    }, {
			      "type": "Feature",
			      "properties": {},
			      "geometry": {
			        "type": "Point",
			        "coordinates": coords2
			      }
			    }
			  ]
			};

			var centerPt = turf.center(features);
			var centerPtResult = centerPt.geometry.coordinates;
			
			centerPtResult = centerPtResult[0] + "," + centerPtResult[1];
			this.centerPtResult = centerPtResult;
			this.getVenues(centerPtResult);
		},
		// --------------------//
		//FourSquare API begins//
		//1. Get a list of venues from 4S.
		getVenues: function(centerPtResult) {
			var self = this;
			if (this.venueType === "coffee") {
				var sectionSelect = "coffee";
				var querySelect = "coffee";
			}
			else if (this.venueType === "beer") {
				var sectionSelect = "drinks";
				var querySelect = "beer";
			};

		//Foursquare API call
			var call3 = $.ajax({
				url: "https://api.foursquare.com/v2/venues/explore",
				type: "GET",
				dataType: "json",
				data: {
					ll: centerPtResult,
					client_id: this.clientId,
					client_secret: this.clientSecret,
					v: 20150722,
					radius: 3000,
					section: sectionSelect,
					openNow: 1,
					venuePhotos: 1,
					query: querySelect,
					limit: 6,
					sortByDistance: 1,
					format: "json"
				},
			});

			$.when(call3).then(function(res3) {
				var venueResult = res3.response.groups[0].items;
				console.log(venueResult);
				self.displayVenues(venueResult);
			});

		},
		//3. build our html to display on the page.
		displayVenues: function(localVenues) {

			$(".resultsContainer").empty();
			if (localVenues.length === 0) {
				  var zilch = $('<h4>').text("Uh oh.  Looks like your query hasn't returned any results.  Your halfway point is probably in the middle of nowhere :(");
			    $('.resultsContainer').append(zilch);
			  };

		  // Grab results container, and template from HTML
			var resultsContainer = $('.resultsContainer');
			var venueTemplate = $('#venue-template').html();
			
		  // Setup forEach to loop over each of the results, and 
			localVenues.forEach(function(venueItem) {
				// Shorten object call
				var v = venueItem.venue;

				// Set variables for each piece of object info
				var venueName = v.name;
				var venueAddress = v.location.formattedAddress[0];
				var venueDistance = v.location.distance;
				var venueCity = v.location.formattedAddress[1];
				var venueImage = v.featuredPhotos.items[0].prefix + "300x300" + v.photos.groups[0].items[0].suffix;
				var venueId = v.id;
				var venueUrlPrefix = "https://foursquare.com/v/";

				// Set template as variable so we can append it easier later.
				var templateItem = $(venueTemplate);

				// Find elements within template, and place in data.
				templateItem.find('.venue__image').attr('src', venueImage);
				templateItem.find('.venue__name').text(venueName);
				templateItem.find('.venue__addr').text(venueAddress);
				templateItem.find('.venue__city').text(venueCity);
				templateItem.find('.venue__dist span').text(venueDistance + "m");
				templateItem.find('.venue__link').attr("href", venueUrlPrefix + venueId);

				resultsContainer.append(templateItem);

				L.marker([venueItem.venue.location.lat,venueItem.venue.location.lng]).addTo(map).bindPopup(venueName + ":" + "<br>" + venueAddress);

				map.setView([localVenues[0].venue.location.lat,venueItem.venue.location.lng], 15);
				});

		},
		// Hide modal on click
		closeModal: function() {
			this.showModal = false;
		},

	}, // End of methods
	mounted: function(){
		// Hide modal on Esc
		document.addEventListener("keydown", (e) => {
      if (e.keyCode == 27) {
        this.closeModal();
      }
    });
    // Initialize mapbox
    var map = L.map('map').setView([43.65323,-79.38318
    ], 12);

    // Disable scrolling when hovering on map
    map.scrollWheelZoom.disable();

    // Some Mapbox specifics for on load [suplied by mapbox]
    L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
        maxZoom: 18,
        id: 'rbnhmll.n1oca4ci',
        accessToken: "pk.eyJ1IjoicmJuaG1sbCIsImEiOiI3NjY4ZDk5NjFhMTYyMDMxMWFmMmM5YWEzMzlkMDgwZiJ9.Ep7u1zX_6SFI94jPki9O-w"
    }).addTo(map);
	} // End Mounted (Vue Ready)
});